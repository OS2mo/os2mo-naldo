import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  CPR: any;
  Cursor: any;
  Date: any;
  DateTime: any;
  UUID: any;
  Upload: any;
  int: any;
};

/** Address information for an employee or organisation unit */
export type Address = {
  __typename?: 'Address';
  /** Address type */
  address_type: Class;
  /** UUID of the address type klasse. */
  address_type_uuid: Scalars['UUID'];
  /** Connected employee. Note that this is mutually exclusive with the org_unit field */
  employee?: Maybe<Array<Employee>>;
  /** UUID of the employee related to the address. */
  employee_uuid?: Maybe<Scalars['UUID']>;
  /** Connected Engagement */
  engagement?: Maybe<Array<Engagement>>;
  /** Optional UUID of an associated engagement. */
  engagement_uuid?: Maybe<Scalars['UUID']>;
  /** href of address */
  href?: Maybe<Scalars['String']>;
  /** Name of address */
  name?: Maybe<Scalars['String']>;
  /** Connected organisation unit. Note that this is mutually exclusive with the employee field */
  org_unit?: Maybe<Array<OrganisationUnit>>;
  /** UUID of the organisation unit related to the address. */
  org_unit_uuid?: Maybe<Scalars['UUID']>;
  /** The object type. */
  type: Scalars['String'];
  /** Short, unique key. Defaults to object UUID. */
  user_key?: Maybe<Scalars['String']>;
  /** UUID to be created. Will be autogenerated if not specified. */
  uuid?: Maybe<Scalars['UUID']>;
  /** Validity of the address object. */
  validity: Validity;
  /** Value of the address, e.g. street or phone number. */
  value: Scalars['String'];
  /** Optional second value of the address. */
  value2?: Maybe<Scalars['String']>;
  /** Address visibility */
  visibility?: Maybe<Class>;
  /** UUID of the visibility klasse of the address. */
  visibility_uuid?: Maybe<Scalars['UUID']>;
};


/** Address information for an employee or organisation unit */
export type AddressAddress_TypeArgs = {
  facet_user_keys?: InputMaybe<Array<Scalars['String']>>;
  facets?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parent_user_keys?: InputMaybe<Array<Scalars['String']>>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Address information for an employee or organisation unit */
export type AddressEmployeeArgs = {
  cpr_numbers?: InputMaybe<Array<Scalars['CPR']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Address information for an employee or organisation unit */
export type AddressEngagementArgs = {
  employees?: InputMaybe<Array<Scalars['UUID']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  org_units?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Address information for an employee or organisation unit */
export type AddressOrg_UnitArgs = {
  from_date?: InputMaybe<Scalars['DateTime']>;
  hierarchies?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Address information for an employee or organisation unit */
export type AddressVisibilityArgs = {
  facet_user_keys?: InputMaybe<Array<Scalars['String']>>;
  facets?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parent_user_keys?: InputMaybe<Array<Scalars['String']>>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};

export type AddressCreateInput = {
  /** Type of the address. */
  address_type: Scalars['UUID'];
  /** UUID for the related engagement. */
  engagement?: InputMaybe<Scalars['UUID']>;
  /** UUID for the related org unit. */
  org_unit?: InputMaybe<Scalars['UUID']>;
  /** UUID for the related person. */
  person?: InputMaybe<Scalars['UUID']>;
  /** UUID to be created. Will be autogenerated if not specified. */
  uuid?: InputMaybe<Scalars['UUID']>;
  /** Validity range for the org-unit. */
  validity: RaValidityInput;
  /** The actual address value. */
  value: Scalars['String'];
  /** Visibility for the address. */
  visibility?: InputMaybe<Scalars['UUID']>;
};

export type AddressResponse = {
  __typename?: 'AddressResponse';
  /** Current state at query validity time */
  current?: Maybe<Address>;
  /** Validities at query registration time */
  objects: Array<Address>;
  /** Registrations for the current entity */
  registrations: Array<Registration>;
  uuid: Scalars['UUID'];
};


export type AddressResponseRegistrationsArgs = {
  actors?: InputMaybe<Array<Scalars['UUID']>>;
  end?: InputMaybe<Scalars['DateTime']>;
  start?: InputMaybe<Scalars['DateTime']>;
};

export type AddressTerminateInput = {
  /** Start date of the validity. */
  from?: InputMaybe<Scalars['DateTime']>;
  /** When the validity should end - required when terminating */
  to: Scalars['DateTime'];
  /** UUID for the address we want to terminate. */
  uuid: Scalars['UUID'];
};

export type AddressUpdateInput = {
  /** Address type uuid. */
  address_type?: InputMaybe<Scalars['UUID']>;
  /** Employee uuid. */
  employee?: InputMaybe<Scalars['UUID']>;
  /** Engagement uuid. */
  engagement?: InputMaybe<Scalars['UUID']>;
  /** Org-unit uuid. */
  org_unit?: InputMaybe<Scalars['UUID']>;
  /** Extra info or uuid. */
  user_key?: InputMaybe<Scalars['String']>;
  /** UUID of the association we want to update. */
  uuid: Scalars['UUID'];
  /** Validity range for the address. */
  validity: RaValidityInput;
  /** Info related to the specific addresstype. */
  value?: InputMaybe<Scalars['String']>;
  /** UUID for visibility of the address. */
  visibility?: InputMaybe<Scalars['UUID']>;
};

/** Connects organisation units and employees */
export type Association = {
  __typename?: 'Association';
  /** Association type */
  association_type?: Maybe<Class>;
  /** UUID of the association type. */
  association_type_uuid?: Maybe<Scalars['UUID']>;
  /** dynamic class */
  dynamic_class?: Maybe<Class>;
  /** Attached class */
  dynamic_class_uuid?: Maybe<Scalars['UUID']>;
  /** Connected employee */
  employee: Array<Employee>;
  /** UUID of the employee related to the association. */
  employee_uuid?: Maybe<Scalars['UUID']>;
  /** Connected IT user */
  it_user: Array<ItUser>;
  /** UUID of an 'ITUser' model, only defined for 'IT associations.' */
  it_user_uuid?: Maybe<Scalars['UUID']>;
  /** Connected job function */
  job_function?: Maybe<Class>;
  /** UUID of a job function class, only defined for 'IT associations.' */
  job_function_uuid?: Maybe<Scalars['UUID']>;
  /** Connected organisation unit */
  org_unit: Array<OrganisationUnit>;
  /** UUID of the organisation unit related to the association. */
  org_unit_uuid: Scalars['UUID'];
  /** Primary status */
  primary?: Maybe<Class>;
  /** UUID of the primary type of the association. */
  primary_uuid?: Maybe<Scalars['UUID']>;
  /** Connected substitute employee */
  substitute: Array<Employee>;
  /** UUID of the substitute for the employee in the association. */
  substitute_uuid?: Maybe<Scalars['UUID']>;
  /** The object type. */
  type: Scalars['String'];
  /** Short, unique key. Defaults to object UUID. */
  user_key?: Maybe<Scalars['String']>;
  /** UUID to be created. Will be autogenerated if not specified. */
  uuid?: Maybe<Scalars['UUID']>;
  /** Validity of the association object. */
  validity: Validity;
};


/** Connects organisation units and employees */
export type AssociationAssociation_TypeArgs = {
  facet_user_keys?: InputMaybe<Array<Scalars['String']>>;
  facets?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parent_user_keys?: InputMaybe<Array<Scalars['String']>>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Connects organisation units and employees */
export type AssociationDynamic_ClassArgs = {
  facet_user_keys?: InputMaybe<Array<Scalars['String']>>;
  facets?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parent_user_keys?: InputMaybe<Array<Scalars['String']>>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Connects organisation units and employees */
export type AssociationEmployeeArgs = {
  cpr_numbers?: InputMaybe<Array<Scalars['CPR']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Connects organisation units and employees */
export type AssociationIt_UserArgs = {
  employees?: InputMaybe<Array<Scalars['UUID']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  org_units?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Connects organisation units and employees */
export type AssociationJob_FunctionArgs = {
  facet_user_keys?: InputMaybe<Array<Scalars['String']>>;
  facets?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parent_user_keys?: InputMaybe<Array<Scalars['String']>>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Connects organisation units and employees */
export type AssociationOrg_UnitArgs = {
  from_date?: InputMaybe<Scalars['DateTime']>;
  hierarchies?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Connects organisation units and employees */
export type AssociationPrimaryArgs = {
  facet_user_keys?: InputMaybe<Array<Scalars['String']>>;
  facets?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parent_user_keys?: InputMaybe<Array<Scalars['String']>>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Connects organisation units and employees */
export type AssociationSubstituteArgs = {
  cpr_numbers?: InputMaybe<Array<Scalars['CPR']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};

export type AssociationCreateInput = {
  association_type: Scalars['UUID'];
  employee: Scalars['UUID'];
  org_unit: Scalars['UUID'];
  /** Extra info or uuid. */
  user_key?: InputMaybe<Scalars['String']>;
  /** UUID to be created. Will be autogenerated if not specified. */
  uuid?: InputMaybe<Scalars['UUID']>;
  /** Validity range for the org-unit. */
  validity: RaValidityInput;
};

export type AssociationResponse = {
  __typename?: 'AssociationResponse';
  /** Current state at query validity time */
  current?: Maybe<Association>;
  /** Validities at query registration time */
  objects: Array<Association>;
  /** Registrations for the current entity */
  registrations: Array<Registration>;
  uuid: Scalars['UUID'];
};


export type AssociationResponseRegistrationsArgs = {
  actors?: InputMaybe<Array<Scalars['UUID']>>;
  end?: InputMaybe<Scalars['DateTime']>;
  start?: InputMaybe<Scalars['DateTime']>;
};

export type AssociationTerminateInput = {
  /** Start date of the validity. */
  from?: InputMaybe<Scalars['DateTime']>;
  /** When the validity should end - required when terminating */
  to: Scalars['DateTime'];
  /** UUID for the association we want to terminate. */
  uuid: Scalars['UUID'];
};

export type AssociationUpdateInput = {
  /** Association type uuid. */
  association_type?: InputMaybe<Scalars['UUID']>;
  /** Employee uuid. */
  employee?: InputMaybe<Scalars['UUID']>;
  /** org-unit uuid. */
  org_unit?: InputMaybe<Scalars['UUID']>;
  /** Extra info or uuid. */
  user_key?: InputMaybe<Scalars['String']>;
  /** UUID of the association we want to update. */
  uuid: Scalars['UUID'];
  /** Validity range for the org-unit. */
  validity: RaValidityInput;
};

/** The value component of the class/facet choice setup */
export type Class = {
  __typename?: 'Class';
  /** Immediate descendants of the class */
  children: Array<Class>;
  /** Example usage. */
  example?: Maybe<Scalars['String']>;
  /** Associated facet */
  facet: Facet;
  /** UUID of the related facet. */
  facet_uuid: Scalars['UUID'];
  /** Full name, for backwards compatibility */
  full_name: Scalars['String'];
  /** Name/title of the class. */
  name: Scalars['String'];
  /** UUID of the related organisation. */
  org_uuid: Scalars['UUID'];
  /** Owner of class */
  owner?: Maybe<Scalars['UUID']>;
  /** Immediate parent class */
  parent?: Maybe<Class>;
  /** UUID of the parent class. */
  parent_uuid?: Maybe<Scalars['UUID']>;
  /** Published state of the class object. */
  published?: Maybe<Scalars['String']>;
  /** Scope of the class. */
  scope?: Maybe<Scalars['String']>;
  /** Associated top-level facet */
  top_level_facet: Facet;
  /** The object type */
  type: Scalars['String'];
  /** Short, unique key. Defaults to object UUID. */
  user_key?: Maybe<Scalars['String']>;
  /** UUID to be created. Will be autogenerated if not specified. */
  uuid?: Maybe<Scalars['UUID']>;
};


/** The value component of the class/facet choice setup */
export type ClassChildrenArgs = {
  facet_user_keys?: InputMaybe<Array<Scalars['String']>>;
  facets?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parent_user_keys?: InputMaybe<Array<Scalars['String']>>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** The value component of the class/facet choice setup */
export type ClassFacetArgs = {
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** The value component of the class/facet choice setup */
export type ClassParentArgs = {
  facet_user_keys?: InputMaybe<Array<Scalars['String']>>;
  facets?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parent_user_keys?: InputMaybe<Array<Scalars['String']>>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};

export type ClassCreateInput = {
  /** Example usage. */
  example?: InputMaybe<Scalars['String']>;
  /** UUID of the related facet. */
  facet_uuid: Scalars['UUID'];
  /** Mo-class name. */
  name: Scalars['String'];
  /** UUID of the related organisation. */
  org_uuid: Scalars['UUID'];
  /** Owner of class */
  owner?: InputMaybe<Scalars['UUID']>;
  /** UUID of the parent class. */
  parent_uuid?: InputMaybe<Scalars['UUID']>;
  /** Published state of the class object. */
  published?: InputMaybe<Scalars['String']>;
  /** Scope of the class. */
  scope?: InputMaybe<Scalars['String']>;
  /** The object type */
  type?: Scalars['String'];
  /** Extra info or uuid */
  user_key: Scalars['String'];
  /** UUID to be created. Will be autogenerated if not specified. */
  uuid?: InputMaybe<Scalars['UUID']>;
};

/** A configuration setting */
export type Configuration = {
  __typename?: 'Configuration';
  /** JSONified value */
  jsonified_value: Scalars['String'];
  /** Settings key. */
  key: Scalars['String'];
  /** Stringified value */
  stringified_value: Scalars['String'];
};

/** Employee/identity specific information */
export type Employee = {
  __typename?: 'Employee';
  /** Addresses for the employee */
  addresses: Array<Address>;
  /** Associations for the employee */
  associations: Array<Association>;
  /** CPR number of the employee. */
  cpr_no?: Maybe<Scalars['String']>;
  /** Engagement associations */
  engagement_associations: Array<EngagementAssociation>;
  /** Engagements for the employee */
  engagements: Array<Engagement>;
  /** Given name of the employee. */
  givenname: Scalars['String'];
  /** IT users for the employee */
  itusers: Array<ItUser>;
  /** Leaves for the employee */
  leaves: Array<Leave>;
  /** Manager roles for the employee */
  manager_roles: Array<Manager>;
  /** Full name of the employee */
  name: Scalars['String'];
  /** Full nickname of the employee */
  nickname: Scalars['String'];
  /** Given name part of nickname of the employee. */
  nickname_givenname?: Maybe<Scalars['String']>;
  /** Surname part of nickname of the employee. */
  nickname_surname?: Maybe<Scalars['String']>;
  /** Roles for the employee */
  roles: Array<Role>;
  /** Seniority of the employee. */
  seniority?: Maybe<Scalars['Date']>;
  /** Surname of the employee. */
  surname: Scalars['String'];
  /** The object type */
  type: Scalars['String'];
  /** Short, unique key. Defaults to object UUID. */
  user_key?: Maybe<Scalars['String']>;
  /** UUID to be created. Will be autogenerated if not specified. */
  uuid?: Maybe<Scalars['UUID']>;
  /** Validity of the employee. */
  validity: OpenValidity;
};


/** Employee/identity specific information */
export type EmployeeAddressesArgs = {
  address_type_user_keys?: InputMaybe<Array<Scalars['String']>>;
  address_types?: InputMaybe<Array<Scalars['UUID']>>;
  engagements?: InputMaybe<Array<Scalars['UUID']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  org_units?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Employee/identity specific information */
export type EmployeeAssociationsArgs = {
  association_type_user_keys?: InputMaybe<Array<Scalars['String']>>;
  association_types?: InputMaybe<Array<Scalars['UUID']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  org_units?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Employee/identity specific information */
export type EmployeeEngagement_AssociationsArgs = {
  engagements?: InputMaybe<Array<Scalars['UUID']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  org_units?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Employee/identity specific information */
export type EmployeeEngagementsArgs = {
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  org_units?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Employee/identity specific information */
export type EmployeeItusersArgs = {
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  org_units?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Employee/identity specific information */
export type EmployeeLeavesArgs = {
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  org_units?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Employee/identity specific information */
export type EmployeeManager_RolesArgs = {
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  org_units?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Employee/identity specific information */
export type EmployeeRolesArgs = {
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  org_units?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};

export type EmployeeCreateInput = {
  /** Danish CPR number of the employee. */
  cpr_number?: InputMaybe<Scalars['String']>;
  /** Givenname (firstname) of the employee. */
  givenname: Scalars['String'];
  /** Surname (lastname) of the employee. */
  surname: Scalars['String'];
  /** Extra info or uuid. */
  user_key?: InputMaybe<Scalars['String']>;
  /** UUID to be created. Will be autogenerated if not specified. */
  uuid?: InputMaybe<Scalars['UUID']>;
};

export type EmployeeResponse = {
  __typename?: 'EmployeeResponse';
  /** Current state at query validity time */
  current?: Maybe<Employee>;
  /** Validities at query registration time */
  objects: Array<Employee>;
  /** Registrations for the current entity */
  registrations: Array<Registration>;
  uuid: Scalars['UUID'];
};


export type EmployeeResponseRegistrationsArgs = {
  actors?: InputMaybe<Array<Scalars['UUID']>>;
  end?: InputMaybe<Scalars['DateTime']>;
  start?: InputMaybe<Scalars['DateTime']>;
};

export type EmployeeTerminateInput = {
  /** Start date of the validity. */
  from?: InputMaybe<Scalars['DateTime']>;
  /** When the validity should end - required when terminating */
  to: Scalars['DateTime'];
  /** UUID for the employee we want to terminate. */
  uuid: Scalars['UUID'];
};

export type EmployeeUpdateInput = {
  /** New danish CPR No. of the employee. */
  cpr_no?: InputMaybe<Scalars['CPR']>;
  /** Start date of the validity. */
  from: Scalars['DateTime'];
  /** New first-name value of the employee nickname. */
  given_name?: InputMaybe<Scalars['String']>;
  /** New value for the name of the employee */
  name?: InputMaybe<Scalars['String']>;
  /** New nickname value of the employee nickname. */
  nickname?: InputMaybe<Scalars['String']>;
  /** New nickname given-name value of the employee nickname. */
  nickname_given_name?: InputMaybe<Scalars['String']>;
  /** New nickname sur-name value of the employee nickname. */
  nickname_surname?: InputMaybe<Scalars['String']>;
  /** New seniority value of the employee. */
  seniority?: InputMaybe<Scalars['Date']>;
  /** New last-name value of the employee nickname. */
  surname?: InputMaybe<Scalars['String']>;
  /** End date of the validity, if applicable. */
  to?: InputMaybe<Scalars['DateTime']>;
  /** Short, unique key for the employee (defaults to object UUID on creation). */
  user_key?: InputMaybe<Scalars['String']>;
  /** UUID of the employee to be updated. */
  uuid: Scalars['UUID'];
};

/** Employee engagement in an organisation unit */
export type Engagement = {
  __typename?: 'Engagement';
  /** Related employee */
  employee: Array<Employee>;
  /** UUID of the employee related to the engagement. */
  employee_uuid: Scalars['UUID'];
  /** Engagement associations */
  engagement_associations: Array<EngagementAssociation>;
  /** Engagement type */
  engagement_type: Class;
  /** UUID of the engagement type klasse of the engagement. */
  engagement_type_uuid: Scalars['UUID'];
  /** Optional extra information. */
  extension_1?: Maybe<Scalars['String']>;
  /** Optional extra information. */
  extension_2?: Maybe<Scalars['String']>;
  /** Optional extra information. */
  extension_3?: Maybe<Scalars['String']>;
  /** Optional extra information. */
  extension_4?: Maybe<Scalars['String']>;
  /** Optional extra information. */
  extension_5?: Maybe<Scalars['String']>;
  /** Optional extra information. */
  extension_6?: Maybe<Scalars['String']>;
  /** Optional extra information. */
  extension_7?: Maybe<Scalars['String']>;
  /** Optional extra information. */
  extension_8?: Maybe<Scalars['String']>;
  /** Optional extra information. */
  extension_9?: Maybe<Scalars['String']>;
  /** Optional extra information. */
  extension_10?: Maybe<Scalars['String']>;
  /** Indication of contribution to the collection of engagements for the given employee. */
  fraction?: Maybe<Scalars['Int']>;
  /** Is it primary */
  is_primary: Scalars['Boolean'];
  /** Job function */
  job_function: Class;
  /** UUID of the job function klasse of the engagement. */
  job_function_uuid: Scalars['UUID'];
  /** Related leave */
  leave?: Maybe<Leave>;
  /** UUID of the leave related to the engagement. */
  leave_uuid?: Maybe<Scalars['UUID']>;
  /** Related organisation unit */
  org_unit: Array<OrganisationUnit>;
  /** UUID of the organisation unit related to the engagement. */
  org_unit_uuid: Scalars['UUID'];
  /** Primary status */
  primary?: Maybe<Class>;
  /** UUID of the primary klasse of the engagement. */
  primary_uuid?: Maybe<Scalars['UUID']>;
  /** The object type. */
  type: Scalars['String'];
  /** Short, unique key. Defaults to object UUID. */
  user_key?: Maybe<Scalars['String']>;
  /** UUID to be created. Will be autogenerated if not specified. */
  uuid?: Maybe<Scalars['UUID']>;
  /** Validity of the engagement object. */
  validity: Validity;
};


/** Employee engagement in an organisation unit */
export type EngagementEmployeeArgs = {
  cpr_numbers?: InputMaybe<Array<Scalars['CPR']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Employee engagement in an organisation unit */
export type EngagementEngagement_AssociationsArgs = {
  employees?: InputMaybe<Array<Scalars['UUID']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  org_units?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Employee engagement in an organisation unit */
export type EngagementEngagement_TypeArgs = {
  facet_user_keys?: InputMaybe<Array<Scalars['String']>>;
  facets?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parent_user_keys?: InputMaybe<Array<Scalars['String']>>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Employee engagement in an organisation unit */
export type EngagementJob_FunctionArgs = {
  facet_user_keys?: InputMaybe<Array<Scalars['String']>>;
  facets?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parent_user_keys?: InputMaybe<Array<Scalars['String']>>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Employee engagement in an organisation unit */
export type EngagementLeaveArgs = {
  employees?: InputMaybe<Array<Scalars['UUID']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  org_units?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Employee engagement in an organisation unit */
export type EngagementOrg_UnitArgs = {
  from_date?: InputMaybe<Scalars['DateTime']>;
  hierarchies?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Employee engagement in an organisation unit */
export type EngagementPrimaryArgs = {
  facet_user_keys?: InputMaybe<Array<Scalars['String']>>;
  facets?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parent_user_keys?: InputMaybe<Array<Scalars['String']>>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};

/** Employee engagement in an organisation unit */
export type EngagementAssociation = {
  __typename?: 'EngagementAssociation';
  /** Related engagement */
  engagement: Array<Engagement>;
  /** Related engagement association type */
  engagement_association_type: Class;
  /** Reference to the engagement association type klasse for the created engagement association object. */
  engagement_association_type_uuid: Scalars['UUID'];
  /** Reference to the engagement for which the engagement association should be created. */
  engagement_uuid: Scalars['UUID'];
  /** Connected organisation unit */
  org_unit: Array<OrganisationUnit>;
  /** Reference to the organisation unit for which the engagement association should be created. */
  org_unit_uuid: Scalars['UUID'];
  /** The object type. */
  type: Scalars['String'];
  /** Short, unique key. Defaults to object UUID. */
  user_key?: Maybe<Scalars['String']>;
  /** UUID to be created. Will be autogenerated if not specified. */
  uuid?: Maybe<Scalars['UUID']>;
  /** Validity of the association object. */
  validity: Validity;
};


/** Employee engagement in an organisation unit */
export type EngagementAssociationEngagementArgs = {
  employees?: InputMaybe<Array<Scalars['UUID']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  org_units?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Employee engagement in an organisation unit */
export type EngagementAssociationEngagement_Association_TypeArgs = {
  facet_user_keys?: InputMaybe<Array<Scalars['String']>>;
  facets?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parent_user_keys?: InputMaybe<Array<Scalars['String']>>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Employee engagement in an organisation unit */
export type EngagementAssociationOrg_UnitArgs = {
  from_date?: InputMaybe<Scalars['DateTime']>;
  hierarchies?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};

export type EngagementAssociationResponse = {
  __typename?: 'EngagementAssociationResponse';
  /** Current state at query validity time */
  current?: Maybe<EngagementAssociation>;
  /** Validities at query registration time */
  objects: Array<EngagementAssociation>;
  /** Registrations for the current entity */
  registrations: Array<Registration>;
  uuid: Scalars['UUID'];
};


export type EngagementAssociationResponseRegistrationsArgs = {
  actors?: InputMaybe<Array<Scalars['UUID']>>;
  end?: InputMaybe<Scalars['DateTime']>;
  start?: InputMaybe<Scalars['DateTime']>;
};

export type EngagementCreateInput = {
  /** UUID of the related employee. */
  employee: Scalars['UUID'];
  engagement_type: Scalars['UUID'];
  job_function: Scalars['UUID'];
  /** The related org-unit object. */
  org_unit: Scalars['UUID'];
  /** Name or UUID of the related engagement. */
  user_key?: InputMaybe<Scalars['String']>;
  /** UUID to be created. Will be autogenerated if not specified. */
  uuid?: InputMaybe<Scalars['UUID']>;
  /** Validity of the engagement object. */
  validity: RaValidityInput;
};

export type EngagementResponse = {
  __typename?: 'EngagementResponse';
  /** Current state at query validity time */
  current?: Maybe<Engagement>;
  /** Validities at query registration time */
  objects: Array<Engagement>;
  /** Registrations for the current entity */
  registrations: Array<Registration>;
  uuid: Scalars['UUID'];
};


export type EngagementResponseRegistrationsArgs = {
  actors?: InputMaybe<Array<Scalars['UUID']>>;
  end?: InputMaybe<Scalars['DateTime']>;
  start?: InputMaybe<Scalars['DateTime']>;
};

export type EngagementTerminateInput = {
  /** Start date of the validity. */
  from?: InputMaybe<Scalars['DateTime']>;
  /** When the validity should end - required when terminating */
  to: Scalars['DateTime'];
  /** UUID for the engagement we want to terminate. */
  uuid: Scalars['UUID'];
};

export type EngagementUpdateInput = {
  /** UUID of the related employee. */
  employee?: InputMaybe<Scalars['UUID']>;
  /** UUID of the engagement type. */
  engagement_type?: InputMaybe<Scalars['UUID']>;
  /** UUID of the job function. */
  job_function?: InputMaybe<Scalars['UUID']>;
  /** The related org-unit object. */
  org_unit?: InputMaybe<Scalars['UUID']>;
  /** Name or UUID of the related engagement. */
  user_key?: InputMaybe<Scalars['String']>;
  /** UUID of the Engagement you want to update. */
  uuid: Scalars['UUID'];
  /** Validity of the engagement object. */
  validity: RaValidityInput;
};

/** The key component of the class/facet choice setup */
export type Facet = {
  __typename?: 'Facet';
  /** Associated classes */
  classes: Array<Class>;
  /** Description of the facet object. */
  description: Scalars['String'];
  /** UUID of the related organisation. */
  org_uuid: Scalars['UUID'];
  /** UUID of the parent facet. */
  parent_uuid?: Maybe<Scalars['UUID']>;
  /** Published state of the facet object. */
  published?: Maybe<Scalars['String']>;
  /** The object type */
  type: Scalars['String'];
  /** Short, unique key. */
  user_key: Scalars['String'];
  /** UUID to be created. Will be autogenerated if not specified. */
  uuid?: Maybe<Scalars['UUID']>;
};


/** The key component of the class/facet choice setup */
export type FacetClassesArgs = {
  facet_user_keys?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parent_user_keys?: InputMaybe<Array<Scalars['String']>>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};

export type FacetCreateInput = {
  /** UUID of the related organisation. */
  org_uuid: Scalars['UUID'];
  /** UUID of the parent facet. */
  parent_uuid?: InputMaybe<Scalars['UUID']>;
  /** Published state of the facet object. */
  published?: InputMaybe<Scalars['String']>;
  /** The object type */
  type?: Scalars['String'];
  /** Facet name. */
  user_key: Scalars['String'];
  /** UUID to be created. Will be autogenerated if not specified. */
  uuid?: InputMaybe<Scalars['UUID']>;
};

/** Checks whether a specific subsystem is working */
export type File = {
  __typename?: 'File';
  /** Base64 encoded contents */
  base64_contents: Scalars['String'];
  /** Name of the export file. */
  file_name: Scalars['String'];
  /** The file store the file is stored in. */
  file_store: FileStore;
  /** Text contents */
  text_contents: Scalars['String'];
};

export enum FileStore {
  Exports = 'EXPORTS',
  Insights = 'INSIGHTS'
}

/** Checks whether a specific subsystem is working */
export type Health = {
  __typename?: 'Health';
  /** Short, unique key. */
  identifier: Scalars['String'];
  /** Healthcheck status */
  status?: Maybe<Scalars['Boolean']>;
};

export type HealthPaged = {
  __typename?: 'HealthPaged';
  objects: Array<Health>;
  page_info: PageInfo;
};

/** Systems that IT users are connected to */
export type ItSystem = {
  __typename?: 'ITSystem';
  /** Name/titel of the itsystem. */
  name: Scalars['String'];
  /** The ITSystem type. */
  system_type?: Maybe<Scalars['String']>;
  /** The object type */
  type: Scalars['String'];
  /** Short, unique key. */
  user_key: Scalars['String'];
  /** UUID to be created. Will be autogenerated if not specified. */
  uuid?: Maybe<Scalars['UUID']>;
};

export type ItSystemCreateInput = {
  /** Start date of the validity. */
  from?: InputMaybe<Scalars['DateTime']>;
  name: Scalars['String'];
  /** End date of the validity, if applicable. */
  to?: InputMaybe<Scalars['DateTime']>;
  user_key: Scalars['String'];
};

/** User information related to IT systems */
export type ItUser = {
  __typename?: 'ITUser';
  /** Connected employee */
  employee?: Maybe<Array<Employee>>;
  /** UUID of the employee related to the user. */
  employee_uuid?: Maybe<Scalars['UUID']>;
  /** Related engagement */
  engagement?: Maybe<Array<Engagement>>;
  /** UUID of the engagement related to the user. */
  engagement_uuid?: Maybe<Scalars['UUID']>;
  /** Connected itsystem */
  itsystem: ItSystem;
  /** UUID of the ITSystem related to the user. */
  itsystem_uuid: Scalars['UUID'];
  /** Connected organisation unit */
  org_unit?: Maybe<Array<OrganisationUnit>>;
  /** UUID organisation unit related to the user. */
  org_unit_uuid?: Maybe<Scalars['UUID']>;
  /** UUID of an associated `primary_type` class. */
  primary_uuid?: Maybe<Scalars['UUID']>;
  /** The object type. */
  type: Scalars['String'];
  /** Short, unique key. Defaults to object UUID. */
  user_key?: Maybe<Scalars['String']>;
  /** UUID to be created. Will be autogenerated if not specified. */
  uuid?: Maybe<Scalars['UUID']>;
  /** Validity of the IT user object. */
  validity: Validity;
};


/** User information related to IT systems */
export type ItUserEmployeeArgs = {
  cpr_numbers?: InputMaybe<Array<Scalars['CPR']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** User information related to IT systems */
export type ItUserEngagementArgs = {
  employees?: InputMaybe<Array<Scalars['UUID']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  org_units?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** User information related to IT systems */
export type ItUserItsystemArgs = {
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** User information related to IT systems */
export type ItUserOrg_UnitArgs = {
  from_date?: InputMaybe<Scalars['DateTime']>;
  hierarchies?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};

export type ItUserCreateInput = {
  /** Reference to the engagement of the IT user (if any). */
  engagement?: InputMaybe<Scalars['UUID']>;
  /** Reference to the IT system for the IT user. */
  itsystem: Scalars['UUID'];
  /** Reference to the organisation unit of the IT user (if any). */
  org_unit?: InputMaybe<Scalars['UUID']>;
  /** Reference to the employee for the IT user (if any). */
  person?: InputMaybe<Scalars['UUID']>;
  /** Primary field of the IT user object */
  primary?: InputMaybe<Scalars['UUID']>;
  /** The object type. */
  type?: Scalars['String'];
  /** The IT user account name. */
  user_key: Scalars['String'];
  /** UUID to be created. Will be autogenerated if not specified. */
  uuid?: InputMaybe<Scalars['UUID']>;
  /** Validity of the created IT user object. */
  validity: RaValidityInput;
};

export type ItUserResponse = {
  __typename?: 'ITUserResponse';
  /** Current state at query validity time */
  current?: Maybe<ItUser>;
  /** Validities at query registration time */
  objects: Array<ItUser>;
  /** Registrations for the current entity */
  registrations: Array<Registration>;
  uuid: Scalars['UUID'];
};


export type ItUserResponseRegistrationsArgs = {
  actors?: InputMaybe<Array<Scalars['UUID']>>;
  end?: InputMaybe<Scalars['DateTime']>;
  start?: InputMaybe<Scalars['DateTime']>;
};

export type ItUserTerminateInput = {
  /** Start date of the validity. */
  from?: InputMaybe<Scalars['DateTime']>;
  /** When the validity should end - required when terminating */
  to: Scalars['DateTime'];
  /** UUID for the it-user we want to terminate. */
  uuid: Scalars['UUID'];
};

export type ItUserUpdateInput = {
  /** Optional reference to an engagement. */
  engagement?: InputMaybe<Scalars['UUID']>;
  /** Reference to the IT system for the IT user. */
  itsystem?: InputMaybe<Scalars['UUID']>;
  /** Primary field of the IT user object */
  primary?: InputMaybe<Scalars['UUID']>;
  /** The IT user account name. */
  user_key?: InputMaybe<Scalars['String']>;
  /** UUID of the IT-user you want to update. */
  uuid: Scalars['UUID'];
  /** Validity of the created IT user object. */
  validity: RaValidityInput;
};

/** Kommunernes Landsforenings Emnesystematik */
export type Kle = {
  __typename?: 'KLE';
  /** List of UUIDs of the KLE aspect. */
  kle_aspect_uuids: Array<Scalars['UUID']>;
  /** KLE Aspects */
  kle_aspects: Array<Class>;
  /** KLE number */
  kle_number: Class;
  /** UUID of the KLE number. */
  kle_number_uuid: Scalars['UUID'];
  /** Associated organisation unit */
  org_unit?: Maybe<Array<OrganisationUnit>>;
  /** UUID of the organisation unit related to the KLE. */
  org_unit_uuid?: Maybe<Scalars['UUID']>;
  /** The object type. */
  type: Scalars['String'];
  /** Short, unique key. Defaults to object UUID. */
  user_key?: Maybe<Scalars['String']>;
  /** UUID to be created. Will be autogenerated if not specified. */
  uuid?: Maybe<Scalars['UUID']>;
  /** Validity of the kle object. */
  validity: Validity;
};


/** Kommunernes Landsforenings Emnesystematik */
export type KleKle_AspectsArgs = {
  facet_user_keys?: InputMaybe<Array<Scalars['String']>>;
  facets?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parent_user_keys?: InputMaybe<Array<Scalars['String']>>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Kommunernes Landsforenings Emnesystematik */
export type KleKle_NumberArgs = {
  facet_user_keys?: InputMaybe<Array<Scalars['String']>>;
  facets?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parent_user_keys?: InputMaybe<Array<Scalars['String']>>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Kommunernes Landsforenings Emnesystematik */
export type KleOrg_UnitArgs = {
  from_date?: InputMaybe<Scalars['DateTime']>;
  hierarchies?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};

export type KleResponse = {
  __typename?: 'KLEResponse';
  /** Current state at query validity time */
  current?: Maybe<Kle>;
  /** Validities at query registration time */
  objects: Array<Kle>;
  /** Registrations for the current entity */
  registrations: Array<Registration>;
  uuid: Scalars['UUID'];
};


export type KleResponseRegistrationsArgs = {
  actors?: InputMaybe<Array<Scalars['UUID']>>;
  end?: InputMaybe<Scalars['DateTime']>;
  start?: InputMaybe<Scalars['DateTime']>;
};

/** Leave (e.g. parental leave) for employees */
export type Leave = {
  __typename?: 'Leave';
  /** Related employee */
  employee: Array<Employee>;
  /** UUID of the employee related to the leave. */
  employee_uuid: Scalars['UUID'];
  /** Related engagement */
  engagement?: Maybe<Engagement>;
  /** UUID of the engagement related to the leave. */
  engagement_uuid?: Maybe<Scalars['UUID']>;
  /** Leave type */
  leave_type: Class;
  /** UUID of the leave type klasse. */
  leave_type_uuid: Scalars['UUID'];
  /** The object type. */
  type: Scalars['String'];
  /** Short, unique key. Defaults to object UUID. */
  user_key?: Maybe<Scalars['String']>;
  /** UUID to be created. Will be autogenerated if not specified. */
  uuid?: Maybe<Scalars['UUID']>;
  /** Validity of the leave object. */
  validity: Validity;
};


/** Leave (e.g. parental leave) for employees */
export type LeaveEmployeeArgs = {
  cpr_numbers?: InputMaybe<Array<Scalars['CPR']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Leave (e.g. parental leave) for employees */
export type LeaveEngagementArgs = {
  employees?: InputMaybe<Array<Scalars['UUID']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  org_units?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Leave (e.g. parental leave) for employees */
export type LeaveLeave_TypeArgs = {
  facet_user_keys?: InputMaybe<Array<Scalars['String']>>;
  facets?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parent_user_keys?: InputMaybe<Array<Scalars['String']>>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};

export type LeaveResponse = {
  __typename?: 'LeaveResponse';
  /** Current state at query validity time */
  current?: Maybe<Leave>;
  /** Validities at query registration time */
  objects: Array<Leave>;
  /** Registrations for the current entity */
  registrations: Array<Registration>;
  uuid: Scalars['UUID'];
};


export type LeaveResponseRegistrationsArgs = {
  actors?: InputMaybe<Array<Scalars['UUID']>>;
  end?: InputMaybe<Scalars['DateTime']>;
  start?: InputMaybe<Scalars['DateTime']>;
};

/** Managers of organisation units and their connected identities */
export type Manager = {
  __typename?: 'Manager';
  /** Manager identity details */
  employee?: Maybe<Array<Employee>>;
  /** UUID of the employee related to the manager. */
  employee_uuid?: Maybe<Scalars['UUID']>;
  /** Manager level */
  manager_level?: Maybe<Class>;
  /** UUID of the manager level. */
  manager_level_uuid?: Maybe<Scalars['UUID']>;
  /** Manager type */
  manager_type?: Maybe<Class>;
  /** UUID of the manager type. */
  manager_type_uuid?: Maybe<Scalars['UUID']>;
  /** Managed organisation unit */
  org_unit: Array<OrganisationUnit>;
  /** UUID of the organisation unit related to the manager. */
  org_unit_uuid: Scalars['UUID'];
  /** Manager responsibilities */
  responsibilities: Array<Class>;
  /** List of UUID's of the responsibilities. */
  responsibility_uuids?: Maybe<Array<Scalars['UUID']>>;
  /** The object type. */
  type: Scalars['String'];
  /** Short, unique key. Defaults to object UUID. */
  user_key?: Maybe<Scalars['String']>;
  /** UUID to be created. Will be autogenerated if not specified. */
  uuid?: Maybe<Scalars['UUID']>;
  /** Validity of the manager object. */
  validity: Validity;
};


/** Managers of organisation units and their connected identities */
export type ManagerEmployeeArgs = {
  cpr_numbers?: InputMaybe<Array<Scalars['CPR']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Managers of organisation units and their connected identities */
export type ManagerManager_LevelArgs = {
  facet_user_keys?: InputMaybe<Array<Scalars['String']>>;
  facets?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parent_user_keys?: InputMaybe<Array<Scalars['String']>>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Managers of organisation units and their connected identities */
export type ManagerManager_TypeArgs = {
  facet_user_keys?: InputMaybe<Array<Scalars['String']>>;
  facets?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parent_user_keys?: InputMaybe<Array<Scalars['String']>>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Managers of organisation units and their connected identities */
export type ManagerOrg_UnitArgs = {
  from_date?: InputMaybe<Scalars['DateTime']>;
  hierarchies?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Managers of organisation units and their connected identities */
export type ManagerResponsibilitiesArgs = {
  facet_user_keys?: InputMaybe<Array<Scalars['String']>>;
  facets?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parent_user_keys?: InputMaybe<Array<Scalars['String']>>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};

export type ManagerCreateInput = {
  /** UUID of the managers level. */
  manager_level: Scalars['UUID'];
  /** UUID of the managers type.. */
  manager_type: Scalars['UUID'];
  /** UUID of the managers organisation unit. */
  org_unit: Scalars['UUID'];
  /** UUID of the manager as person. */
  person: Scalars['UUID'];
  /** UUID of the managers responsibilities. */
  responsibility: Array<Scalars['UUID']>;
  /** The object type. */
  type?: Scalars['String'];
  /** Extra info or uuid. */
  user_key?: InputMaybe<Scalars['String']>;
  /** UUID to be created. Will be autogenerated if not specified. */
  uuid?: InputMaybe<Scalars['UUID']>;
  /** Validity range for the manager. */
  validity: RaValidityInput;
};

export type ManagerResponse = {
  __typename?: 'ManagerResponse';
  /** Current state at query validity time */
  current?: Maybe<Manager>;
  /** Validities at query registration time */
  objects: Array<Manager>;
  /** Registrations for the current entity */
  registrations: Array<Registration>;
  uuid: Scalars['UUID'];
};


export type ManagerResponseRegistrationsArgs = {
  actors?: InputMaybe<Array<Scalars['UUID']>>;
  end?: InputMaybe<Scalars['DateTime']>;
  start?: InputMaybe<Scalars['DateTime']>;
};

export type ManagerTerminateInput = {
  /** Start date of the validity. */
  from?: InputMaybe<Scalars['DateTime']>;
  /** When the validity should end - required when terminating */
  to: Scalars['DateTime'];
  /** UUID of the manager we want to terminate. */
  uuid: Scalars['UUID'];
};

export type ManagerUpdateInput = {
  /** UUID of the managers level to be updated. */
  manager_level?: InputMaybe<Scalars['UUID']>;
  /** UUID of the managers type to be updated. */
  manager_type?: InputMaybe<Scalars['UUID']>;
  /** UUID of the managers organisation unit to be updated. */
  org_unit?: InputMaybe<Scalars['UUID']>;
  /** UUID of the manager as person to be updated. */
  person?: InputMaybe<Scalars['UUID']>;
  /** UUID of the managers responsibilities to be updated. */
  responsibility?: InputMaybe<Array<Scalars['UUID']>>;
  /** Extra info or uuid. */
  user_key?: InputMaybe<Scalars['String']>;
  /** UUID of the manager to be updated. */
  uuid: Scalars['UUID'];
  /** Validity range for the manager to be updated. */
  validity: RaValidityInput;
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Creates an address. */
  address_create: AddressResponse;
  /** Deletes an address. */
  address_delete: AddressResponse;
  /** Terminates an address. */
  address_terminate: AddressResponse;
  /** Updates an address. */
  address_update: AddressResponse;
  /** Creates an association. */
  association_create: AssociationResponse;
  /** Terminates an association */
  association_terminate: AssociationResponse;
  /** Updates an association. */
  association_update: AssociationResponse;
  /** Creates a class. */
  class_create: UuidReturn;
  /** Creates an employee. */
  employee_create: EmployeeResponse;
  /** Terminates an employee. */
  employee_terminate: EmployeeResponse;
  /** Updates an employee. */
  employee_update: EmployeeResponse;
  /** Creates an engagement. */
  engagement_create: EngagementResponse;
  /** Deletes an engagement. */
  engagement_delete: EngagementResponse;
  /** Terminates an engagement. */
  engagement_terminate: EngagementResponse;
  /** Updates an engagement. */
  engagement_update: EngagementResponse;
  /** Creates a facet. */
  facet_create: UuidReturn;
  /** Creates an ITSystem. */
  itsystem_create: UuidReturn;
  /** Deletes an ITSystem. */
  itsystem_delete: UuidReturn;
  /** Updates an ITSystem. */
  itsystem_update: UuidReturn;
  /** Creates an IT-User. */
  ituser_create: ItUserResponse;
  /** Deletes an IT-User. */
  ituser_delete: ItUserResponse;
  /** Terminates IT-User. */
  ituser_terminate: ItUserResponse;
  /** Updates an IT-User. */
  ituser_update: ItUserResponse;
  /** Creates a manager relation. */
  manager_create: ManagerResponse;
  /** Terminates a manager relation. */
  manager_terminate: ManagerResponse;
  /** Updates a manager relation. */
  manager_update: ManagerResponse;
  /** Creates an organisation unit. */
  org_unit_create: OrganisationUnitResponse;
  /** Trigger refresh for an organisation unit */
  org_unit_refresh: OrganisationUnitRefresh;
  /** Terminates an organization unit. */
  org_unit_terminate: OrganisationUnitResponse;
  /** Updates an organisation unit. */
  org_unit_update: OrganisationUnitResponse;
  /** Upload a file */
  upload_file: Scalars['String'];
};


export type MutationAddress_CreateArgs = {
  input: AddressCreateInput;
};


export type MutationAddress_DeleteArgs = {
  uuid: Scalars['UUID'];
};


export type MutationAddress_TerminateArgs = {
  at: AddressTerminateInput;
};


export type MutationAddress_UpdateArgs = {
  input: AddressUpdateInput;
};


export type MutationAssociation_CreateArgs = {
  input: AssociationCreateInput;
};


export type MutationAssociation_TerminateArgs = {
  input: AssociationTerminateInput;
};


export type MutationAssociation_UpdateArgs = {
  input: AssociationUpdateInput;
};


export type MutationClass_CreateArgs = {
  input: ClassCreateInput;
};


export type MutationEmployee_CreateArgs = {
  input: EmployeeCreateInput;
};


export type MutationEmployee_TerminateArgs = {
  input: EmployeeTerminateInput;
};


export type MutationEmployee_UpdateArgs = {
  input: EmployeeUpdateInput;
};


export type MutationEngagement_CreateArgs = {
  input: EngagementCreateInput;
};


export type MutationEngagement_DeleteArgs = {
  uuid: Scalars['UUID'];
};


export type MutationEngagement_TerminateArgs = {
  input: EngagementTerminateInput;
};


export type MutationEngagement_UpdateArgs = {
  input: EngagementUpdateInput;
};


export type MutationFacet_CreateArgs = {
  input: FacetCreateInput;
};


export type MutationItsystem_CreateArgs = {
  input: ItSystemCreateInput;
};


export type MutationItsystem_DeleteArgs = {
  uuid: Scalars['UUID'];
};


export type MutationItsystem_UpdateArgs = {
  input: ItSystemCreateInput;
  uuid: Scalars['UUID'];
};


export type MutationItuser_CreateArgs = {
  input: ItUserCreateInput;
};


export type MutationItuser_DeleteArgs = {
  uuid: Scalars['UUID'];
};


export type MutationItuser_TerminateArgs = {
  input: ItUserTerminateInput;
};


export type MutationItuser_UpdateArgs = {
  input: ItUserUpdateInput;
};


export type MutationManager_CreateArgs = {
  input: ManagerCreateInput;
};


export type MutationManager_TerminateArgs = {
  input: ManagerTerminateInput;
};


export type MutationManager_UpdateArgs = {
  input: ManagerUpdateInput;
};


export type MutationOrg_Unit_CreateArgs = {
  input: OrganisationUnitCreateInput;
};


export type MutationOrg_Unit_RefreshArgs = {
  uuid: Scalars['UUID'];
};


export type MutationOrg_Unit_TerminateArgs = {
  unit: OrganisationUnitTerminateInput;
};


export type MutationOrg_Unit_UpdateArgs = {
  input: OrganisationUnitUpdateInput;
};


export type MutationUpload_FileArgs = {
  file: Scalars['Upload'];
  file_store: FileStore;
  force?: Scalars['Boolean'];
};

/** Validity of objects with optional from date */
export type OpenValidity = {
  __typename?: 'OpenValidity';
  /** Start date of the validity. */
  from?: Maybe<Scalars['DateTime']>;
  /** End date of the validity, if applicable. */
  to?: Maybe<Scalars['DateTime']>;
};

/** Root organisation - one and only one of these can exist */
export type Organisation = {
  __typename?: 'Organisation';
  /** The municipality code for the organisation unit */
  municipality_code?: Maybe<Scalars['Int']>;
  /** Name of the organisation. */
  name: Scalars['String'];
  /** The object type */
  type: Scalars['String'];
  /** Short, unique key. Defaults to object UUID. */
  user_key?: Maybe<Scalars['String']>;
  /** UUID to be created. Will be autogenerated if not specified. */
  uuid?: Maybe<Scalars['UUID']>;
};

/** Hierarchical unit within the organisation tree */
export type OrganisationUnit = {
  __typename?: 'OrganisationUnit';
  /** Related addresses */
  addresses: Array<Address>;
  /** All ancestors in the organisation tree */
  ancestors: Array<OrganisationUnit>;
  /** Related associations */
  associations: Array<Association>;
  /** Children count of the organisation unit. */
  child_count: Scalars['Int'];
  /** The immediate descendants in the organisation tree */
  children: Array<OrganisationUnit>;
  /** Engagement associations for the organisational unit */
  engagement_associations: Array<EngagementAssociation>;
  /** Related engagements */
  engagements: Array<Engagement>;
  /** Related IT users */
  itusers: Array<ItUser>;
  /** KLE responsibilites for the organisation unit */
  kles: Array<Kle>;
  /** Related leaves */
  leaves: Array<Leave>;
  /** Managers of the organisation unit */
  managers: Array<Manager>;
  /** Name of the created organisation unit. */
  name: Scalars['String'];
  /** UUID of the organisation unit hierarchy. */
  org_unit_hierarchy?: Maybe<Scalars['UUID']>;
  /** Organisation unit hierarchy */
  org_unit_hierarchy_model?: Maybe<Class>;
  /** Organisation unit level */
  org_unit_level?: Maybe<Class>;
  /** UUID of the organisation unit level. */
  org_unit_level_uuid?: Maybe<Scalars['UUID']>;
  /** The immediate descendants in the organisation tree */
  parent?: Maybe<OrganisationUnit>;
  /** UUID of the parent organisation unit. */
  parent_uuid?: Maybe<Scalars['UUID']>;
  /** Related units for the organisational unit */
  related_units: Array<RelatedUnit>;
  /** Related roles */
  roles: Array<Role>;
  /** Time planning strategy */
  time_planning?: Maybe<Class>;
  /** UUID of the time planning object. */
  time_planning_uuid?: Maybe<Scalars['UUID']>;
  /** The object type. */
  type: Scalars['String'];
  /** Organisation unit hierarchy */
  unit_type?: Maybe<Class>;
  /** UUID of the organisation unit type. */
  unit_type_uuid?: Maybe<Scalars['UUID']>;
  /** Short, unique key. Defaults to object UUID. */
  user_key?: Maybe<Scalars['String']>;
  /** UUID to be created. Will be autogenerated if not specified. */
  uuid?: Maybe<Scalars['UUID']>;
  /** Validity of the created organisation unit. */
  validity: Validity;
};


/** Hierarchical unit within the organisation tree */
export type OrganisationUnitAddressesArgs = {
  address_type_user_keys?: InputMaybe<Array<Scalars['String']>>;
  address_types?: InputMaybe<Array<Scalars['UUID']>>;
  employees?: InputMaybe<Array<Scalars['UUID']>>;
  engagements?: InputMaybe<Array<Scalars['UUID']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Hierarchical unit within the organisation tree */
export type OrganisationUnitAssociationsArgs = {
  association_type_user_keys?: InputMaybe<Array<Scalars['String']>>;
  association_types?: InputMaybe<Array<Scalars['UUID']>>;
  employees?: InputMaybe<Array<Scalars['UUID']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Hierarchical unit within the organisation tree */
export type OrganisationUnitChild_CountArgs = {
  from_date?: InputMaybe<Scalars['DateTime']>;
  hierarchies?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Hierarchical unit within the organisation tree */
export type OrganisationUnitChildrenArgs = {
  from_date?: InputMaybe<Scalars['DateTime']>;
  hierarchies?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Hierarchical unit within the organisation tree */
export type OrganisationUnitEngagement_AssociationsArgs = {
  employees?: InputMaybe<Array<Scalars['UUID']>>;
  engagements?: InputMaybe<Array<Scalars['UUID']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Hierarchical unit within the organisation tree */
export type OrganisationUnitEngagementsArgs = {
  employees?: InputMaybe<Array<Scalars['UUID']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Hierarchical unit within the organisation tree */
export type OrganisationUnitItusersArgs = {
  employees?: InputMaybe<Array<Scalars['UUID']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Hierarchical unit within the organisation tree */
export type OrganisationUnitKlesArgs = {
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Hierarchical unit within the organisation tree */
export type OrganisationUnitLeavesArgs = {
  employees?: InputMaybe<Array<Scalars['UUID']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Hierarchical unit within the organisation tree */
export type OrganisationUnitManagersArgs = {
  inherit?: Scalars['Boolean'];
};


/** Hierarchical unit within the organisation tree */
export type OrganisationUnitOrg_Unit_Hierarchy_ModelArgs = {
  facet_user_keys?: InputMaybe<Array<Scalars['String']>>;
  facets?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parent_user_keys?: InputMaybe<Array<Scalars['String']>>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Hierarchical unit within the organisation tree */
export type OrganisationUnitOrg_Unit_LevelArgs = {
  facet_user_keys?: InputMaybe<Array<Scalars['String']>>;
  facets?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parent_user_keys?: InputMaybe<Array<Scalars['String']>>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Hierarchical unit within the organisation tree */
export type OrganisationUnitParentArgs = {
  from_date?: InputMaybe<Scalars['DateTime']>;
  hierarchies?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Hierarchical unit within the organisation tree */
export type OrganisationUnitRelated_UnitsArgs = {
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Hierarchical unit within the organisation tree */
export type OrganisationUnitRolesArgs = {
  employees?: InputMaybe<Array<Scalars['UUID']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Hierarchical unit within the organisation tree */
export type OrganisationUnitTime_PlanningArgs = {
  facet_user_keys?: InputMaybe<Array<Scalars['String']>>;
  facets?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parent_user_keys?: InputMaybe<Array<Scalars['String']>>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Hierarchical unit within the organisation tree */
export type OrganisationUnitUnit_TypeArgs = {
  facet_user_keys?: InputMaybe<Array<Scalars['String']>>;
  facets?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parent_user_keys?: InputMaybe<Array<Scalars['String']>>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};

export type OrganisationUnitCreateInput = {
  /** Org-unit name. */
  name: Scalars['String'];
  /** UUID of the unit hierarchy. */
  org_unit_hierarchy?: InputMaybe<Scalars['UUID']>;
  /** UUID of unit level. */
  org_unit_level?: InputMaybe<Scalars['UUID']>;
  /** UUID of the type. */
  org_unit_type?: InputMaybe<Scalars['UUID']>;
  /** UUID of the related parent. */
  parent?: InputMaybe<Scalars['UUID']>;
  /** UUID of time planning. */
  time_planning?: InputMaybe<Scalars['UUID']>;
  /** Extra info or uuid. */
  user_key?: InputMaybe<Scalars['String']>;
  /** UUID to be created. Will be autogenerated if not specified. */
  uuid?: InputMaybe<Scalars['UUID']>;
  /** Validity range for the org-unit. */
  validity: RaValidityInput;
};

/** Response model for Organisation Unit refresh event. */
export type OrganisationUnitRefresh = {
  __typename?: 'OrganisationUnitRefresh';
  /** Refresh message containing trigger responses. */
  message: Scalars['String'];
};

export type OrganisationUnitResponse = {
  __typename?: 'OrganisationUnitResponse';
  /** Current state at query validity time */
  current?: Maybe<OrganisationUnit>;
  /** Validities at query registration time */
  objects: Array<OrganisationUnit>;
  /** Registrations for the current entity */
  registrations: Array<Registration>;
  uuid: Scalars['UUID'];
};


export type OrganisationUnitResponseRegistrationsArgs = {
  actors?: InputMaybe<Array<Scalars['UUID']>>;
  end?: InputMaybe<Scalars['DateTime']>;
  start?: InputMaybe<Scalars['DateTime']>;
};

export type OrganisationUnitTerminateInput = {
  /** Start date of the validity. */
  from?: InputMaybe<Scalars['DateTime']>;
  /** When the validity should end - required when terminating */
  to: Scalars['DateTime'];
  /** UUID for the org-unit we want to terminate. */
  uuid: Scalars['UUID'];
};

export type OrganisationUnitUpdateInput = {
  /** Name of the organisation unit to be updated. */
  name?: InputMaybe<Scalars['String']>;
  /** UUID of organisation units hierarchy to be updated. */
  org_unit_hierarchy?: InputMaybe<Scalars['UUID']>;
  /** UUID of the organisation units level to be updated. */
  org_unit_level?: InputMaybe<Scalars['UUID']>;
  /** UUID of the organisation units type to be updated. */
  org_unit_type?: InputMaybe<Scalars['UUID']>;
  /** UUID of the organisation units related parent to be updated. */
  parent?: InputMaybe<Scalars['UUID']>;
  /** UUID of organisation units time planning to be updated. */
  time_planning?: InputMaybe<Scalars['UUID']>;
  /** Extra info or uuid. */
  user_key?: InputMaybe<Scalars['String']>;
  /** UUID of the organisation unit to be updated. */
  uuid: Scalars['UUID'];
  /** Validity range for the organisation unit to be updated. */
  validity: RaValidityInput;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  next_cursor?: Maybe<Scalars['Cursor']>;
};

/** Entrypoint for all read-operations */
export type Query = {
  __typename?: 'Query';
  /** Get a list of all addresses, optionally by uuid(s) */
  addresses: Array<AddressResponse>;
  /** Get a list of all Associations, optionally by uuid(s) */
  associations: Array<AssociationResponse>;
  /** Get a list of all classes, optionally by uuid(s) */
  classes: Array<Class>;
  /** Get a list of configuration variables. */
  configuration: Array<Configuration>;
  /** Get a list of all employees, optionally by uuid(s) */
  employees: Array<EmployeeResponse>;
  /** Get a list of engagement associations */
  engagement_associations: Array<EngagementAssociationResponse>;
  /** Get a list of all engagements, optionally by uuid(s) */
  engagements: Array<EngagementResponse>;
  /** Get a list of all facets, optionally by uuid(s) */
  facets: Array<Facet>;
  /** Get a list of all files, optionally by filename(s) */
  files: Array<File>;
  /** Get a list of all health checks, optionally by identifier(s) */
  healths: HealthPaged;
  /** Get a list of all ITSystems, optionally by uuid(s) */
  itsystems: Array<ItSystem>;
  /** Get a list of all ITUsers, optionally by uuid(s) */
  itusers: Array<ItUserResponse>;
  /** Get a list of all KLE's, optionally by uuid(s) */
  kles: Array<KleResponse>;
  /** Get a list of all leaves, optionally by uuid(s) */
  leaves: Array<LeaveResponse>;
  /** Get a list of all managers, optionally by uuid(s) */
  managers: Array<ManagerResponse>;
  /** Get the root-organisation. This endpoint fails if not exactly one exists in LoRa. */
  org: Organisation;
  /** Get a list of all organisation units, optionally by uuid(s) */
  org_units: Array<OrganisationUnitResponse>;
  /** Get a list of related organisation units, optionally by uuid(s) */
  related_units: Array<RelatedUnitResponse>;
  /** Get a list of all roles, optionally by uuid(s) */
  roles: Array<RoleResponse>;
  /** Get component versions */
  version: Version;
};


/** Entrypoint for all read-operations */
export type QueryAddressesArgs = {
  address_type_user_keys?: InputMaybe<Array<Scalars['String']>>;
  address_types?: InputMaybe<Array<Scalars['UUID']>>;
  employees?: InputMaybe<Array<Scalars['UUID']>>;
  engagements?: InputMaybe<Array<Scalars['UUID']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  org_units?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Entrypoint for all read-operations */
export type QueryAssociationsArgs = {
  association_type_user_keys?: InputMaybe<Array<Scalars['String']>>;
  association_types?: InputMaybe<Array<Scalars['UUID']>>;
  employees?: InputMaybe<Array<Scalars['UUID']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  org_units?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Entrypoint for all read-operations */
export type QueryClassesArgs = {
  facet_user_keys?: InputMaybe<Array<Scalars['String']>>;
  facets?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parent_user_keys?: InputMaybe<Array<Scalars['String']>>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Entrypoint for all read-operations */
export type QueryConfigurationArgs = {
  identifiers?: InputMaybe<Array<Scalars['String']>>;
};


/** Entrypoint for all read-operations */
export type QueryEmployeesArgs = {
  cpr_numbers?: InputMaybe<Array<Scalars['CPR']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Entrypoint for all read-operations */
export type QueryEngagement_AssociationsArgs = {
  employees?: InputMaybe<Array<Scalars['UUID']>>;
  engagements?: InputMaybe<Array<Scalars['UUID']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  org_units?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Entrypoint for all read-operations */
export type QueryEngagementsArgs = {
  employees?: InputMaybe<Array<Scalars['UUID']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  org_units?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Entrypoint for all read-operations */
export type QueryFacetsArgs = {
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Entrypoint for all read-operations */
export type QueryFilesArgs = {
  file_names?: InputMaybe<Array<Scalars['String']>>;
  file_store: FileStore;
};


/** Entrypoint for all read-operations */
export type QueryHealthsArgs = {
  cursor?: InputMaybe<Scalars['Cursor']>;
  identifiers?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
};


/** Entrypoint for all read-operations */
export type QueryItsystemsArgs = {
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Entrypoint for all read-operations */
export type QueryItusersArgs = {
  employees?: InputMaybe<Array<Scalars['UUID']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  org_units?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Entrypoint for all read-operations */
export type QueryKlesArgs = {
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  org_units?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Entrypoint for all read-operations */
export type QueryLeavesArgs = {
  employees?: InputMaybe<Array<Scalars['UUID']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  org_units?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Entrypoint for all read-operations */
export type QueryManagersArgs = {
  employees?: InputMaybe<Array<Scalars['UUID']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  org_units?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Entrypoint for all read-operations */
export type QueryOrg_UnitsArgs = {
  from_date?: InputMaybe<Scalars['DateTime']>;
  hierarchies?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Entrypoint for all read-operations */
export type QueryRelated_UnitsArgs = {
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  org_units?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};


/** Entrypoint for all read-operations */
export type QueryRolesArgs = {
  employees?: InputMaybe<Array<Scalars['UUID']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  org_units?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
  uuids?: InputMaybe<Array<Scalars['UUID']>>;
};

export type RaValidityInput = {
  /** Start date of the validity. */
  from: Scalars['DateTime'];
  /** End date of the validity, if applicable. */
  to?: InputMaybe<Scalars['DateTime']>;
};

export type Registration = {
  __typename?: 'Registration';
  actor: Scalars['UUID'];
  end?: Maybe<Scalars['DateTime']>;
  registration_id: Scalars['Int'];
  start: Scalars['DateTime'];
};

/** list of related organisation units */
export type RelatedUnit = {
  __typename?: 'RelatedUnit';
  /** UUIDs of the related organisation units. */
  org_unit_uuids: Array<Scalars['UUID']>;
  /** Related organisation units */
  org_units: Array<OrganisationUnit>;
  /** The object type. */
  type: Scalars['String'];
  /** Short, unique key. Defaults to object UUID. */
  user_key?: Maybe<Scalars['String']>;
  /** UUID to be created. Will be autogenerated if not specified. */
  uuid?: Maybe<Scalars['UUID']>;
  /** Validity of the relatedUnit object. */
  validity: Validity;
};


/** list of related organisation units */
export type RelatedUnitOrg_UnitsArgs = {
  from_date?: InputMaybe<Scalars['DateTime']>;
  hierarchies?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};

export type RelatedUnitResponse = {
  __typename?: 'RelatedUnitResponse';
  /** Current state at query validity time */
  current?: Maybe<RelatedUnit>;
  /** Validities at query registration time */
  objects: Array<RelatedUnit>;
  /** Registrations for the current entity */
  registrations: Array<Registration>;
  uuid: Scalars['UUID'];
};


export type RelatedUnitResponseRegistrationsArgs = {
  actors?: InputMaybe<Array<Scalars['UUID']>>;
  end?: InputMaybe<Scalars['DateTime']>;
  start?: InputMaybe<Scalars['DateTime']>;
};

/** Role an employee has within an organisation unit */
export type Role = {
  __typename?: 'Role';
  /** Connected employee */
  employee: Array<Employee>;
  /** UUID of the employee related to the role. */
  employee_uuid: Scalars['UUID'];
  /** Connected organisation unit */
  org_unit: Array<OrganisationUnit>;
  /** UUID of the organisation unit related to the association. */
  org_unit_uuid: Scalars['UUID'];
  /** Role type */
  role_type: Class;
  /** UUID of the role type klasse. */
  role_type_uuid: Scalars['UUID'];
  /** The object type. */
  type: Scalars['String'];
  /** Short, unique key. Defaults to object UUID. */
  user_key?: Maybe<Scalars['String']>;
  /** UUID to be created. Will be autogenerated if not specified. */
  uuid?: Maybe<Scalars['UUID']>;
  /** Validity of the role object. */
  validity: Validity;
};


/** Role an employee has within an organisation unit */
export type RoleEmployeeArgs = {
  cpr_numbers?: InputMaybe<Array<Scalars['CPR']>>;
  from_date?: InputMaybe<Scalars['DateTime']>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Role an employee has within an organisation unit */
export type RoleOrg_UnitArgs = {
  from_date?: InputMaybe<Scalars['DateTime']>;
  hierarchies?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  to_date?: InputMaybe<Scalars['DateTime']>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};


/** Role an employee has within an organisation unit */
export type RoleRole_TypeArgs = {
  facet_user_keys?: InputMaybe<Array<Scalars['String']>>;
  facets?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['int']>;
  offset?: InputMaybe<Scalars['int']>;
  parent_user_keys?: InputMaybe<Array<Scalars['String']>>;
  parents?: InputMaybe<Array<Scalars['UUID']>>;
  user_keys?: InputMaybe<Array<Scalars['String']>>;
};

export type RoleResponse = {
  __typename?: 'RoleResponse';
  /** Current state at query validity time */
  current?: Maybe<Role>;
  /** Validities at query registration time */
  objects: Array<Role>;
  /** Registrations for the current entity */
  registrations: Array<Registration>;
  uuid: Scalars['UUID'];
};


export type RoleResponseRegistrationsArgs = {
  actors?: InputMaybe<Array<Scalars['UUID']>>;
  end?: InputMaybe<Scalars['DateTime']>;
  start?: InputMaybe<Scalars['DateTime']>;
};

export type UuidReturn = {
  __typename?: 'UUIDReturn';
  uuid: Scalars['UUID'];
};

/** Validity of objects with required from date */
export type Validity = {
  __typename?: 'Validity';
  /** Start date of the validity. */
  from: Scalars['DateTime'];
  /** End date of the validity, if applicable. */
  to?: Maybe<Scalars['DateTime']>;
};

/** MO & LoRa & DIPEX versions */
export type Version = {
  __typename?: 'Version';
  /** DIPEX version */
  dipex_version?: Maybe<Scalars['String']>;
  /** LoRa version */
  lora_version?: Maybe<Scalars['String']>;
  /** OS2mo commit hash */
  mo_hash?: Maybe<Scalars['String']>;
  /** OS2mo Version */
  mo_version?: Maybe<Scalars['String']>;
};

export type OrgUnitsQueryVariables = Exact<{
  fromDate?: InputMaybe<Scalars['DateTime']>;
}>;


export type OrgUnitsQuery = { __typename?: 'Query', org_units: Array<{ __typename?: 'OrganisationUnitResponse', objects: Array<{ __typename?: 'OrganisationUnit', name: string, uuid?: any | null, addresses: Array<{ __typename?: 'Address', name?: string | null, address_type: { __typename?: 'Class', name: string, scope?: string | null } }>, children: Array<{ __typename?: 'OrganisationUnit', name: string, uuid?: any | null }> }> }> };


export const OrgUnitsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"OrgUnits"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"fromDate"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"DateTime"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"org_units"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"parents"},"value":{"kind":"NullValue"}},{"kind":"Argument","name":{"kind":"Name","value":"from_date"},"value":{"kind":"Variable","name":{"kind":"Name","value":"fromDate"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"objects"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"addresses"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"address_type"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"scope"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"uuid"}},{"kind":"Field","name":{"kind":"Name","value":"children"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"uuid"}}]}}]}}]}}]}}]} as unknown as DocumentNode<OrgUnitsQuery, OrgUnitsQueryVariables>;